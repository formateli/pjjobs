#!/usr/bin/env python

# This file is part of PJJobs project.
# The COPYRIGHT file at the top level of this repository
# contains the full copyright notices and license terms.

import os
import sys
import argparse

DIRECTORY = os.path.dirname(os.path.realpath(__file__))

try:
    from pjjobs import VERSION, COPYRIGHT, LICENSE
    
except ImportError:
    print('Running uninstalled mode...')
    DIR = os.path.normpath(os.path.join(DIRECTORY, '..', 'pjjobs'))
    if os.path.isdir(DIR):
        sys.path.insert(0, os.path.dirname(DIR))
    from pjjobs import VERSION, COPYRIGHT, LICENSE


APPNAME = 'PJJobs service'

def get_info():
    res = "\n{0} version {1}\nCopyright {2}\nLicensed under {3}".format(
        APPNAME, VERSION, COPYRIGHT, LICENSE)
    return res


def run_service(args):
    print ("Running...")

#    TODO
#    if sys.stdout:  # Default: WARNING
#        LOGGER.add_handler(logging.StreamHandler(sys.stdout), args.v)

#    if not os.path.isfile(args.file):
#        raise Exception()
#        LOGGER.critical(
#            "File '{0}' not found.".format(args.file),
#           True, 'IOError')

    from pjjobs import PJJobsServer

    server = PJJobsServer(os.path.join(DIRECTORY, 'pjjobs.xml'))
    server.listen()


def run():
    parser = argparse.ArgumentParser(
        description=APPNAME,
        formatter_class=argparse.RawTextHelpFormatter)

    help = "Configuration file. Default: pjjobs.xml."
    parser.add_argument("-c", metavar="config", help=help)

    help = "Address. Default: localhost."
    parser.add_argument("-a", metavar="address", help=help)

    help = "Port. Default: 9009."
    parser.add_argument("-p", metavar="port", help=help)

    parser.add_argument(
        "-i", "--info", action='version', version=get_info(),
        help='Show version, copyright and license.')

    help = "Output verbosity. Default: 'WARNING'"
    parser.add_argument(
        "-v", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        default="WARNING", help=help)

    args = parser.parse_args()
    run_service(args)


if __name__ == "__main__":
    run()

